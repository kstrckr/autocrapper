//-------experimental performance settings-----------/* - 24 SECONDS PER 6 shot shoe skuycTID = function(s) { return app.charIDToTypeID(s); };  sTID = function(s) { return app.stringIDToTypeID(s); };    Stdlib = function Stdlib() {};    Stdlib.setActionPlaybackOptions = function(opt, arg) {    function _ftn() {      var desc = new ActionDescriptor();      var ref = new ActionReference();      ref.putProperty(cTID("Prpr"), cTID("PbkO"));      ref.putEnumerated(cTID("capp"), cTID("Ordn"), cTID("Trgt"));      desc.putReference(cTID("null"), ref );      var pdesc = new ActionDescriptor();      pdesc.putEnumerated(sTID("performance"), sTID("performance"), sTID(opt));      if (opt == "pause" && arg != undefined) {        pdesc.putInteger(sTID("pause"), parseInt(arg));      }      desc.putObject(cTID("T "), cTID("PbkO"), pdesc );      executeAction(cTID("setd"), desc, DialogModes.NO);    }    _ftn();  };  Stdlib.setPlaybackAcclerated = function() {    Stdlib.setActionPlaybackOptions("accelerated");  };  Stdlib.setPlaybackStepByStep = function() {    Stdlib.setActionPlaybackOptions("stepByStep");  };  Stdlib.setPlaybackPaused = function(delaySec) {    Stdlib.setActionPlaybackOptions("pause", delaySec);  }; *//*var inputFolder = Folder.selectDialog ("Select selects");var outputFolder = Folder.selectDialog("Select Output Destination");var dirtyFileList = inputFolder.getFiles();var fileList = [];while (dirtyFileList.length > 0){    if (dirtyFileList[0].hidden === true){        dirtyFileList.splice(0,1);        };    var nextFile = dirtyFileList.shift();    fileList.push(nextFile);};open(fileList[0]);*/var inputFolder = Folder.selectDialog ("Select folder of processed, uncropped JPEGS");var outputFolder = Folder.selectDialog ("Select final output folder for cropped images");//var doc = app.activeDocument//var guides = doc.guides;//var width = doc.width;//var height = doc.height;var readHistogram = function(pixelTotal) {    var histo = doc.histogram;        /*    var sum = function(arr) {        var total = 0;                for (var i = 0; i < arr.length; i++){            total += arr[i];            }                return total;        };        */        var findWeightedAvg = function(arr, total){        var avgTally = 0;                for (var i = 0; i < arr.length; i++){                             avgTally += i*(arr[i]/total);            }                return avgTally        }        var findStdDev = function(arr, mean, total){        var stdTally = 0;                for (var i = 0; i < arr.length; i++){            stdTally += Math.pow((mean-i), 2)*arr[i];            }                stdTally /= total;                return Math.sqrt(stdTally);                }        var histoMean = findWeightedAvg(histo, pixelTotal);    var histoStdDev = findStdDev(histo, histoMean, pixelTotal);        return histoStdDev;        }var drawHorizontal = function(d) {        var mid = height/2;            var selectionBounds = [    [0, (mid-1)-d],    [width, (mid-1)-d],    [width, (mid)-d],    [0, (mid)-d]    ];        doc.selection.select(selectionBounds, SelectionType.REPLACE,0,false);    };var drawVertical = function(d, min, max) {    var mid = width/2;        var selectionBounds = [        [(mid-1)-d, min],        [(mid)-d, min],        [(mid)-d, max],        [(mid-1)-d, max]    ];        doc.selection.select(selectionBounds, SelectionType.REPLACE,0,false);};var scanVertical = function(start, delta){    drawHorizontal(start);    //var edgeCheck = readHistogram(width);         var edgeCheckArray = []    edgeCheckArray[0] = 100;    edgeCheckArray[1] = readHistogram(width);        var position = start;        while (edgeCheckArray[1] > 5 /*&& Math.abs(edgeCheckArray[1]-edgeCheckArray[0]) > .06 */){        position += delta;        drawHorizontal(position);        edgeCheckArray[0] = edgeCheckArray[1]        edgeCheckArray[1] = readHistogram(width);        }            var edgeLocation = doc.selection.bounds    return edgeLocation[1];};var scanHorizontal = function(start, delta, min, max){    drawVertical(start, min, max);    //var edgeCheck = readHistogram(width);         var edgeCheckArray = []    edgeCheckArray[0] = 100;    edgeCheckArray[1] = readHistogram(max-min);        var position = start;        while (edgeCheckArray[1] > 6 /*&& Math.abs(edgeCheckArray[1]-edgeCheckArray[0]) > .06 */){        position += delta;        drawVertical(position, min, max);        edgeCheckArray[0] = edgeCheckArray[1]        edgeCheckArray[1] = readHistogram(max-min);        }            var edgeLocation = doc.selection.bounds    return edgeLocation[0];};/*    ------------WORKING_EDGE_FIND----------------var top = scanVertical(0, 20);guides.add (Direction.HORIZONTAL, top);var bottom = scanVertical(0, -20);guides.add (Direction.HORIZONTAL, bottom);var left = scanHorizontal(0, 20, top, bottom);guides.add (Direction.VERTICAL, left);var right = scanHorizontal(0, -20, top, bottom);guides.add (Direction.VERTICAL, right);//doc.selection.deselect();var selectionBounds = [    [left, top],    [right, top],    [right, bottom],    [left, bottom]]//doc.selection.select(selectionBounds, SelectionType.REPLACE,0,false);*///------------------------------Operation-------------------------------------------------------//master function to cycle through files based on inputFolder fileListif (inputFolder != null && outputFolder != null){    var fileList = inputFolder.getFiles();    var workingArray = [];    //alert(fileList);    //ADD JPEG SAVING OPTIONS DEFINITIONS HERE    while (fileList.length > 0){        //deletes the hidden file and folders from the array as they come up        if (fileList[0] instanceof Folder || fileList[0].hidden == true){            fileList.splice(0,1);            }                while(fileList.length > 0 && fileList[0].name.substr(0,2)=="._"){                        fileList.splice(0,1);                        };                if(fileList.length > 0){             //isolates just the Look ID for batching the looks            var fileName = fileList[0].name;            var lookId = fileName.substr(0,7);            //alert(fileList[0].name.substr(0,7));            //alert(lookId.toString());            while (fileList.length > 0 && fileList[0].name.substr(0,7) == lookId){                                var nextFile = fileList.shift();                workingArray.push(nextFile);                            //var docRef = open(fileList[i]);            //alert(fileList[i].name);                }                         var primaryWidth = 0;            var primaryHeight = 0;                        //alert(workingArray[0]);            for (var i = 0; i < workingArray.length; i++){                //var workingFile = new File(workingArray[i]);                var docRef = open(workingArray[i]);                                                //set document rulers to pixels                app.preferences.rulerUnits = Units.PIXELS;                 //----------FIND_EDGES_HERE------------  var doc = app.activeDocumentvar guides = doc.guides;var width = doc.width;var height = doc.height; var top = scanVertical(0, 20);//guides.add (Direction.HORIZONTAL, top);var bottom = scanVertical(0, -20);//guides.add (Direction.HORIZONTAL, bottom);var left = scanHorizontal(0, 20, top, bottom);//guides.add (Direction.VERTICAL, left);var right = scanHorizontal(0, -20, top, bottom);//guides.add (Direction.VERTICAL, right);//doc.selection.deselect();var selectionFinal = [    [left, top],    [right, top],    [right, bottom],    [left, bottom]] //----------END_FIND_EDGES-------------  //var selectionFinal = [[left, top], [right, top], [right, bottom], [left, bottom]];                var newWidth = right-left;                var newHeight = bottom-top;                //activates final product selection                app.activeDocument.selection.select(selectionFinal,SelectionType.REPLACE,0,false);                //begin final CROP stage                                app.activeDocument.selection.resizeBoundary(112,100,AnchorPosition.MIDDLECENTER);                  /*var selectionWidth;var selectionHeight;var bounds = app.activeDocument.selection.bounds;getSelectionWidth(bounds);var bottomPaddingPercent = (1+((selectionWidth/3375)*(720))/selectionHeight)*100;//alert(bottomPaddingPercent);app.activeDocument.selection.resizeBoundary(100,bottomPaddingPercent,AnchorPosition.TOPCENTER);bounds = app.activeDocument.selection.bounds;getSelectionWidth(bounds);var topPaddingPercent = (Math.abs(((selectionWidth/3375)*(4500))/selectionHeight))*100; app.activeDocument.selection.resizeBoundary(100,topPaddingPercent,AnchorPosition.BOTTOMCENTER);function getSelectionWidth(arr){    selectionWidth = arr[2]-arr[0];    selectionHeight = arr[3]-arr[1];    };*///app.activeDocument.crop(app.activeDocument.selection.bounds);                                    if(app.activeDocument.name.substr (8, 1) === "A" || app.activeDocument.name.substr (8, 1) === "B" || app.activeDocument.name.substr (8, 1) === "C"){                                                          app.activeDocument.selection.resizeBoundary(125,100,AnchorPosition.MIDDLECENTER);                cropGuide = app.activeDocument.selection.bounds;                var newBottom = cropGuide[3]+((newWidth*1.25)*(720/3375)) ;                var newTop = cropGuide[3] - ((newWidth*1.25)*720/3375)*5.25 ;                var finalCrop = [cropGuide[0], newTop, cropGuide[2], newBottom];                app.activeDocument.crop(finalCrop);                                     if (app.activeDocument.name.substr (8, 1) == "A"){                            primaryWidth = app.activeDocument.width;                            primaryHeight = app.activeDocument.height ;                        };                                    } else{                        var currentBounds = app.activeDocument.selection.bounds;                        var currentWidth = currentBounds[2]-currentBounds[0];                        var currentHeight = currentBounds[3]-currentBounds[1];                        var widthAdjust = primaryWidth/currentWidth*100;                        var heightAdjust = primaryHeight/currentHeight*100;                        app.activeDocument.selection.resizeBoundary(widthAdjust,heightAdjust,AnchorPosition.MIDDLECENTER)                                                app.activeDocument.crop(app.activeDocument.selection.bounds);                                               };                                                                                        app.activeDocument.resizeImage(3375, 4500, 72, ResampleMethod.BICUBICSMOOTHER);                                        saveFile = new File(outputFolder + "/" + app.activeDocument.name)                    saveOptions = new JPEGSaveOptions();                    saveOptions.embedColorProfile = true;                    saveOptions.formatOptions = FormatOptions.STANDARDBASELINE;                    saveOptions.matte = MatteType.NONE;                    saveOptions.quality = 10;                    app.activeDocument.saveAs(saveFile, saveOptions, true,Extension.LOWERCASE);                    app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);                 } //break;                workingArray=[];            }         }             }    